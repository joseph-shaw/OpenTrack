)
if(ncol(bm_df) > 15){next}
DF <- process_imu_data(file = files[i], run.filter = run.filter, bf = bf, invert = invert, time_unit = time_unit, up = 0)
names(DF)[2:ncol(DF)] <- paste0("C.", names(DF)[2:ncol(DF)])
DF2 <- DF %>%
mutate(
Time = seq(from = 1, to = nrow(DF)/100, by = 0.01)[1:nrow(DF)],
#time = seq(from = 1, to = nrow(combined.DF)/100, by = 0.01)[1:nrow(combined.DF)],
sec.group = ceiling(Time),
min.group = ceiling(Time/60),
session.type = NA,
session.name = NA,
session.num = NA,
athlete.name = files[i],
C.res.acc = as.numeric(C.res.acc),
#R.res.acc = as.numeric(R.res.acc),
#L.res.acc = as.numeric(L.res.acc),
row_number = as.numeric(row.names(DF))
)
sum_cols <- read.csv("settings/export.csv") %>%
as.vector()
cols <- colnames(read.csv("settings/export.csv"))
test <- data.frame(
session_id =  NA,
athlete_name = files[i],
session_date = NA,
season = "2020/21",
is_dummy = NA,
session_num = NA,
session_type = NA,
session_name = NA,
comments = NA,
position_name = NA,
starttime = NA,
endtime = NA,
r_starttime = NA,
r_endtime = NA,
total_dur = max(DF2$time/60),
active_dur = length(which(DF2$C.active.time != 0))/100/60,
rpe = NA,
srpe = NA,
total_pl = sum(DF2$C.PL, na.rm = TRUE),
active_pl = sum(DF2$C.PL.active, na.rm = TRUE),
DSL = sum(subset(DF2, C.peak.mag >2)$C.peak.mag, na.rm = TRUE),
Jumps = sum(DF2$C.Jump, na.rm = TRUE),
Jumps_6_10 =  length(which(DF2$C.Jump == 1 & DF2$C.jh >=  5   & DF2$C.jh  < 10)),
Jumps_10_15 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 10  & DF2$C.jh < 15)),
Jumps_15_20 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 15  & DF2$C.jh < 20)),
Jumps_20_25 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 20  & DF2$C.jh < 25)),
Jumps_25_30 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 25  & DF2$C.jh < 30)),
Jumps_30_35 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 30  & DF2$C.jh < 35)),
Jumps_35_40 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 35  & DF2$C.jh < 40)),
Jumps_40_45 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 40  & DF2$C.jh < 45)),
Jumps_45_50 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 45  & DF2$C.jh < 50)),
Jumps_50_55 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 50  & DF2$C.jh < 55)),
Jumps_55_60 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 55  & DF2$C.jh < 60)),
Jumps_60_65 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 60  & DF2$C.jh < 65)),
Jumps_65_70 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 65  & DF2$C.jh < 70)),
Jumps_70_75 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 70  & DF2$C.jh < 75)),
Jumps_75_80 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 75  & DF2$C.jh < 80)),
s_jumps = length(which(DF2$C.jh < 20 & DF2$C.jh > 0 & DF2$C.Jump == 1)),
m_jumps = length(which(DF2$C.jh > 20 & DF2$C.jh < 40 & DF2$C.Jump == 1)),
l_jumps = length(which(DF2$C.jh > 40 & DF2$C.jh < 80 & DF2$C.Jump == 1)),
C_count_1_5 = length(which(DF2$C.acc.zone == 1.5)),
C_count_2_0 = length(which(DF2$C.acc.zone == 2.0)),
C_count_2_5 = length(which(DF2$C.acc.zone == 2.5)),
C_count_3_0 = length(which(DF2$C.acc.zone == 3.0)),
C_count_3_5 = length(which(DF2$C.acc.zone == 3.5)),
C_count_4_0 = length(which(DF2$C.acc.zone == 4.0)),
C_count_4_5 = length(which(DF2$C.acc.zone == 4.5)),
C_count_5_0 = length(which(DF2$C.acc.zone == 5.0)),
C_count_5_5 = length(which(DF2$C.acc.zone == 5.5)),
C_count_6_0 = length(which(DF2$C.acc.zone == 6.0)),
C_count_6_5 = length(which(DF2$C.acc.zone == 6.5)),
C_count_7_0 = length(which(DF2$C.acc.zone == 7.0)),
C_count_7_5 = length(which(DF2$C.acc.zone == 7.5)),
C_count_8_0 = length(which(DF2$C.acc.zone == 8.0)),
C_count_8_5 = length(which(DF2$C.acc.zone == 8.5)),
C_count_9_0 = length(which(DF2$C.acc.zone == 9.0)),
C_count_9_5 = length(which(DF2$C.acc.zone == 9.5)),
C_count_10_0 = length(which(DF2$C.acc.zone > 9.5)),
R_count_1_5 = NA,
R_count_2_0 = NA,
R_count_2_5 = NA,
R_count_3_0 = NA,
R_count_3_5 = NA,
R_count_4_0 = NA,
R_count_4_5 = NA,
R_count_5_0 = NA,
R_count_5_5 = NA,
R_count_6_0 = NA,
R_count_6_5 = NA,
R_count_7_0 = NA,
R_count_7_5 = NA,
R_count_8_0 = NA,
R_count_8_5 = NA,
R_count_9_0 = NA,
R_count_9_5 = NA,
R_count_10_0 =NA,
L_count_1_5 = NA,
L_count_2_0 = NA,
L_count_2_5 = NA,
L_count_3_0 = NA,
L_count_3_5 = NA,
L_count_4_0 = NA,
L_count_4_5 = NA,
L_count_5_0 = NA,
L_count_5_5 = NA,
L_count_6_0 = NA,
L_count_6_5 = NA,
L_count_7_0 = NA,
L_count_7_5 = NA,
L_count_8_0 = NA,
L_count_8_5 = NA,
L_count_9_0 = NA,
L_count_9_5 = NA,
L_count_10_0 =NA,
L_DSL = NA,
R_DSL = NA
) %>%
select(
cols
)
jumps <- which(DF2$C.Jump == 1)
jumps_spacing <- (lead(jumps, 1) - jumps) / 100
if(!is_empty(jumps)){
first_rep <- min(which(jumps_spacing < 2))
first_to_last <- (jumps[length(jumps)] - jumps[1]) / 100 / 60
first_rep_to_last <- (jumps[length(jumps)] - jumps[first_rep]) / 100 / 60
test$first_to_last <- first_to_last
test$first_rep_to_last <- first_rep_to_last
}
db[i-5,] <- test
path <- gsub("Brian Data", "Brian Data New", files[i])
write.csv(DF2, file = path)
}
View(db)
View(db)
i <- 1
bm_df <- data.table::fread(files[i]) %>%
mutate(
time = ms / 1000
)
if(ncol(bm_df) > 15){next}
DF <- process_imu_data(file = files[i], run.filter = run.filter, bf = bf, invert = invert, time_unit = time_unit, up = 0)
plot(DF$C.Jumps)
#bm_df <- data.table::fread(files[i]) %>%
bm_df <- read.csv(files[i]) %>%
mutate(
time = ms / 1000
)
if(ncol(bm_df) > 15){next}
DF <- process_imu_data(file = files[i], run.filter = run.filter, bf = bf, invert = invert, time_unit = time_unit, up = 0)
names(DF)[2:ncol(DF)] <- paste0("C.", names(DF)[2:ncol(DF)])
plot(DF$C.Jump)
plot(DF$C.res.acc)
files <- list.files("D:/Brian Data", recursive = T, full.names = T) %>%
filter(!grepl("database"))
files <- list.files("D:/Brian Data", recursive = T, full.names = T) %>%
files <- files[!grepl("database", files)]
!grepl("database", files)
files <- list.files("D:/Brian Data", recursive = T, full.names = T) %>%
files <- files[which(!grepl("database", files))]
files <- as.vector(list.files("D:/Brian Data", recursive = T, full.names = T))
files <- files[which(!grepl("database", files))]
db <- read.csv("C:/Users/shaw_/Documents/R/OpenTrack/database_brian.csv", fileEncoding = "UTF-8-BOM")[0,] %>%
mutate(
first_to_last = NA,
first_rep_to_last = NA
)
# Filter settings
run.filter <- TRUE
data.freq <- 100
order <- 4
filt.freq <- 12
invert <- 0
nyquist.freq <- data.freq / 2
bf <- signal::butter(order, filt.freq / nyquist.freq, type="low")
invert = 0
time_unit = 1000
library(tidyverse)
library(data.table)
library(zoo)
library(caTools)
library(DescTools)
for(i in 2:length(files)){
#bm_df <- data.table::fread(files[i]) %>%
bm_df <- read.csv(files[i]) %>%
mutate(
time = ms / 1000
)
if(ncol(bm_df) > 15){next}
DF <- process_imu_data(file = files[i], run.filter = run.filter, bf = bf, invert = invert, time_unit = time_unit, up = 0)
names(DF)[2:ncol(DF)] <- paste0("C.", names(DF)[2:ncol(DF)])
DF2 <- DF %>%
mutate(
Time = seq(from = 1, to = nrow(DF)/100, by = 0.01)[1:nrow(DF)],
#time = seq(from = 1, to = nrow(combined.DF)/100, by = 0.01)[1:nrow(combined.DF)],
sec.group = ceiling(Time),
min.group = ceiling(Time/60),
session.type = NA,
session.name = NA,
session.num = NA,
athlete.name = files[i],
C.res.acc = as.numeric(C.res.acc),
#R.res.acc = as.numeric(R.res.acc),
#L.res.acc = as.numeric(L.res.acc),
row_number = as.numeric(row.names(DF))
)
sum_cols <- read.csv("settings/export.csv") %>%
as.vector()
cols <- colnames(read.csv("settings/export.csv"))
test <- data.frame(
session_id =  NA,
athlete_name = files[i],
session_date = NA,
season = "2020/21",
is_dummy = NA,
session_num = NA,
session_type = NA,
session_name = NA,
comments = NA,
position_name = NA,
starttime = NA,
endtime = NA,
r_starttime = NA,
r_endtime = NA,
total_dur = max(DF2$time/60),
active_dur = length(which(DF2$C.active.time != 0))/100/60,
rpe = NA,
srpe = NA,
total_pl = sum(DF2$C.PL, na.rm = TRUE),
active_pl = sum(DF2$C.PL.active, na.rm = TRUE),
DSL = sum(subset(DF2, C.peak.mag >2)$C.peak.mag, na.rm = TRUE),
Jumps = sum(DF2$C.Jump, na.rm = TRUE),
Jumps_6_10 =  length(which(DF2$C.Jump == 1 & DF2$C.jh >=  5   & DF2$C.jh  < 10)),
Jumps_10_15 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 10  & DF2$C.jh < 15)),
Jumps_15_20 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 15  & DF2$C.jh < 20)),
Jumps_20_25 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 20  & DF2$C.jh < 25)),
Jumps_25_30 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 25  & DF2$C.jh < 30)),
Jumps_30_35 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 30  & DF2$C.jh < 35)),
Jumps_35_40 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 35  & DF2$C.jh < 40)),
Jumps_40_45 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 40  & DF2$C.jh < 45)),
Jumps_45_50 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 45  & DF2$C.jh < 50)),
Jumps_50_55 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 50  & DF2$C.jh < 55)),
Jumps_55_60 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 55  & DF2$C.jh < 60)),
Jumps_60_65 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 60  & DF2$C.jh < 65)),
Jumps_65_70 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 65  & DF2$C.jh < 70)),
Jumps_70_75 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 70  & DF2$C.jh < 75)),
Jumps_75_80 = length(which(DF2$C.Jump == 1 & DF2$C.jh >= 75  & DF2$C.jh < 80)),
s_jumps = length(which(DF2$C.jh < 20 & DF2$C.jh > 0 & DF2$C.Jump == 1)),
m_jumps = length(which(DF2$C.jh > 20 & DF2$C.jh < 40 & DF2$C.Jump == 1)),
l_jumps = length(which(DF2$C.jh > 40 & DF2$C.jh < 80 & DF2$C.Jump == 1)),
C_count_1_5 = length(which(DF2$C.acc.zone == 1.5)),
C_count_2_0 = length(which(DF2$C.acc.zone == 2.0)),
C_count_2_5 = length(which(DF2$C.acc.zone == 2.5)),
C_count_3_0 = length(which(DF2$C.acc.zone == 3.0)),
C_count_3_5 = length(which(DF2$C.acc.zone == 3.5)),
C_count_4_0 = length(which(DF2$C.acc.zone == 4.0)),
C_count_4_5 = length(which(DF2$C.acc.zone == 4.5)),
C_count_5_0 = length(which(DF2$C.acc.zone == 5.0)),
C_count_5_5 = length(which(DF2$C.acc.zone == 5.5)),
C_count_6_0 = length(which(DF2$C.acc.zone == 6.0)),
C_count_6_5 = length(which(DF2$C.acc.zone == 6.5)),
C_count_7_0 = length(which(DF2$C.acc.zone == 7.0)),
C_count_7_5 = length(which(DF2$C.acc.zone == 7.5)),
C_count_8_0 = length(which(DF2$C.acc.zone == 8.0)),
C_count_8_5 = length(which(DF2$C.acc.zone == 8.5)),
C_count_9_0 = length(which(DF2$C.acc.zone == 9.0)),
C_count_9_5 = length(which(DF2$C.acc.zone == 9.5)),
C_count_10_0 = length(which(DF2$C.acc.zone > 9.5)),
R_count_1_5 = NA,
R_count_2_0 = NA,
R_count_2_5 = NA,
R_count_3_0 = NA,
R_count_3_5 = NA,
R_count_4_0 = NA,
R_count_4_5 = NA,
R_count_5_0 = NA,
R_count_5_5 = NA,
R_count_6_0 = NA,
R_count_6_5 = NA,
R_count_7_0 = NA,
R_count_7_5 = NA,
R_count_8_0 = NA,
R_count_8_5 = NA,
R_count_9_0 = NA,
R_count_9_5 = NA,
R_count_10_0 =NA,
L_count_1_5 = NA,
L_count_2_0 = NA,
L_count_2_5 = NA,
L_count_3_0 = NA,
L_count_3_5 = NA,
L_count_4_0 = NA,
L_count_4_5 = NA,
L_count_5_0 = NA,
L_count_5_5 = NA,
L_count_6_0 = NA,
L_count_6_5 = NA,
L_count_7_0 = NA,
L_count_7_5 = NA,
L_count_8_0 = NA,
L_count_8_5 = NA,
L_count_9_0 = NA,
L_count_9_5 = NA,
L_count_10_0 =NA,
L_DSL = NA,
R_DSL = NA
) %>%
select(
cols
)
jumps <- which(DF2$C.Jump == 1)
jumps_spacing <- (lead(jumps, 1) - jumps) / 100
if(!is_empty(jumps)){
first_rep <- min(which(jumps_spacing < 2))
first_to_last <- (jumps[length(jumps)] - jumps[1]) / 100 / 60
first_rep_to_last <- (jumps[length(jumps)] - jumps[first_rep]) / 100 / 60
test$first_to_last <- first_to_last
test$first_rep_to_last <- first_rep_to_last
}
db[i,] <- test
path <- gsub("Brian Data", "Brian Data New", files[i])
write.csv(DF2, file = path)
print(i)
}
View(db)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
test <- 1
exists(test)
is.null(test)
is.null(test2)
exists(test, where = "environment")
exists(test, where = "envir")
missing(test)
missing(test2)
False == exists(test)
FALSE == exists(test)
exists(test)
exists("test")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
OpenTrack::run_app()
