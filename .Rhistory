aes(
x = (fp_height + imu_height) / 2,
y = fp_height - imu_height
),
shape = 21, fill = "transparent", colour = "black"
)+
theme(
axis.line = element_line(size = 0.3),
axis.ticks = element_line(size = 0.3),
panel.grid.major = element_line(size = 0.25),
plot.margin = margin(5,5,5, 30, unit = "pt"),
strip.background = element_blank(),
strip.text = element_blank(),
panel.spacing.x = unit(5, "mm")
)+
labs(
x = "Mean Height Measurement (cm)",
y = "Force Platform - IMU (cm)"
)#+
stats <- stats %>%
mutate(jump = factor(jump,
levels = c("All", "Saute", "Jete", "DT"),
labels = c("All", "Sauté", "Jeté", "Double Tour")
))
cor <- ggplot(df_plot)+
facet_wrap(~jump, nrow = 1)+
geom_segment(x = 0, y = 0, xend = 60, yend = 60, linetype = "solid", size = 0.2, colour = "grey")+
#geom_segment(x = 2.5, y = 0, xend = 52.5, yend = 50, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 5, y = 0, xend = 55, yend = 50, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 0, y = 2.5, xend = 50, yend = 52.5, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 0, y = 5, xend = 50, yend = 55, linetype = "solid", size = 0.05, colour = "grey")+
ggtext::geom_richtext(
data = stats,
aes(
label = paste0(glue::glue("r<sub>rm</sub> = "), format(round(rrm, digits = 2), nsmall = 2), glue::glue("; <i>p</i> < "), p2)
),
x = 35, y = 4, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
ggtext::geom_richtext(
data=stats,
aes(
label = paste0(glue::glue("r = "), format(round(r1, digits = 2), nsmall = 2), glue::glue("; <i>p</i> < "), p1)
),
x = 35, y = 9, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
ggtext::geom_richtext(
data=stats,
aes(
label = paste0(glue::glue("MAE = "), format(round(mae, digits = 2), nsmall = 2), glue::glue(" cm"))
),
x = 35, y = 14, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
geom_point(
aes(
x = fp_height,
y = imu_height
),
shape = 21, fill = "transparent", colour = "black"
)+
geom_smooth(method = "lm",
aes(
x = fp_height,
y = imu_height
),
se = F, colour = "black", size = 0.5
)+
theme_classic()+
coord_cartesian(xlim = c(0, 60), ylim = c(0, 60), expand = F, clip = "off")+
theme(
axis.line = element_line(size = 0.2),
axis.ticks = element_line(size = 0.2),
panel.grid.major = element_line(size = 0.25),
plot.margin = margin(5,5,5,5, unit = "pt"),
strip.background = element_blank(),
panel.spacing.x = unit(5, "mm")
)+
labs(
x = "Force Platform Measurement (cm)",
y = "IMU Measurement (cm)"
)#+
ba <- ggplot(limits)+
facet_wrap(~jump, nrow = 1)+
geom_rect(aes(ymin = lower.ci1, ymax = upper.ci1), xmin = 1, xmax = 49, alpha = 0.1)+
geom_rect(xmin = 1, xmax = 49, aes(ymin = lower.ci2, ymax = upper.ci2), alpha = 0.1)+
geom_rect(xmin = 1, xmax = 49, aes(ymin = lower.ci3, ymax = upper.ci3), alpha = 0.1)+
geom_segment(x = 0, xend = 50, y = 0, yend = 0, size = 0.3)+
geom_segment(aes(y = estimate1, yend = estimate1,), x = 1, xend = 49, size = 0.3, linetype = "dashed")+
geom_segment(x = 1, xend = 49, aes(y = estimate2, yend = estimate2), size = 0.3, linetype = "dotted", colour = "black")+
geom_segment(x = 1, xend = 49, aes(y = estimate3, yend = estimate3), size = 0.3, linetype = "dotted", colour = "black")+
theme_classic()+
coord_cartesian(xlim = c(0, 50), ylim = c(-20, 20), expand = F, clip = "on")+
geom_point(
data = df_plot,
aes(
x = (fp_height + imu_height) / 2,
y = fp_height - imu_height
),
shape = 21, fill = "transparent", colour = "black"
)+
theme(
axis.line = element_line(size = 0.3),
axis.ticks = element_line(size = 0.3),
panel.grid.major = element_line(size = 0.25),
plot.margin = margin(5,5,5, 30, unit = "pt"),
strip.background = element_blank(),
strip.text = element_blank(),
panel.spacing.x = unit(5, "mm")
)+
labs(
x = "Mean Height Measurement (cm)",
y = "Force Platform - IMU (cm)"
)#+
cor/ba +
ggsave("C:/Users/shaw_/Google Drive/PhD/Algorithm Validation/Height/plot_all.png", height = 160, width = 300, units = "mm", type = "cairo")
# Validation Data Analysis
library(patchwork)
library(SimplyAgree)
library(tidyverse)
# load data
df <- read.csv("C:/Users/shaw_/Google Drive/PhD/Algorithm Validation/Height/data.csv")[,1:5]
# run stats
rm <- rmcorr::rmcorr(participant = factor(df$participant), measure1 = fp_height, measure2 = imu_height, dataset = df)
r <- cor.test(df$fp_height, df$imu_height)
custom.p <- ".001"
rmse <- sqrt(mean((df$fp_height-df$imu_height)^2))
mae <- mean(abs(df$fp_height-df$imu_height))
d <- df[df$jump == "Saute",]
rm_s <- rmcorr::rmcorr(participant = factor(d$participant), measure1 = fp_height, measure2 = imu_height, dataset = d)
r_s <- cor.test(d$fp_height, d$imu_height)
mae_s <- mean(abs(d$fp_height-d$imu_height))
d <- df[df$jump == "Jete",]
rm_j <- rmcorr::rmcorr(participant = factor(d$participant), measure1 = fp_height, measure2 = imu_height, dataset = d)
r_j <- cor.test(d$fp_height, d$imu_height)
mae_j <- mean(abs(d$fp_height-d$imu_height))
d <- df[df$jump == "DT",]
rm_dt <- rmcorr::rmcorr(participant = factor(d$participant), measure1 = fp_height, measure2 = imu_height, dataset = d)
r_dt <- cor.test(d$fp_height, d$imu_height)
mae_dt <- mean(abs(d$fp_height-d$imu_height))
stats <- data.frame(
jump = c("All", "Saute", "Jete", "DT"),
r1 = c(r$estimate, r_s$estimate, r_j$estimate, r_dt$estimate),
p1 = rep(custom.p, 4),
rrm = c(rm$r, rm_s$r, rm_j$r, rm_dt$r),
p2 =  c(rep(custom.p, 3), ".375"), # change this
mae = c(mae, mae_s, mae_j, mae_dt)
)
limits_all <- c("All", unlist(agree_nest(x = "fp_height", y = "imu_height", id = "participant", data = df, agree.level = .95)$loa))
limits_s <- c("Saute", unlist(agree_nest(x = "fp_height", y = "imu_height", id = "participant", data = df[df$jump=="Saute",], agree.level = .95)$loa))
limits_j <- c("Jete", unlist(agree_nest(x = "fp_height", y = "imu_height", id = "participant", data = df[df$jump=="Jete",], agree.level = .95)$loa))
limits_dt <- c("DT", unlist(agree_nest(x = "fp_height", y = "imu_height", id = "participant", data = df[df$jump=="DT",], agree.level = .95)$loa))
limits <- as.data.frame(rbind(limits_all, limits_s, limits_j, limits_dt))
names(limits)[1] <- "jump"
limits[,2:10] <- apply(limits[,2:10], 2, as.numeric)
df2 <- df %>%
mutate(jump = "All")
df_plot <- rbind(df2, df) %>%
mutate(jump = factor(jump,
levels = c("All", "Saute", "Jete", "DT"),
labels = c("All", "Sauté", "Jeté", "Double Tour")
))
limits <- limits %>%
mutate(jump = factor(jump,
levels = c("All", "Saute", "Jete", "DT"),
labels = c("All", "Sauté", "Jeté", "Double Tour")
))
stats <- stats %>%
mutate(jump = factor(jump,
levels = c("All", "Saute", "Jete", "DT"),
labels = c("All", "Sauté", "Jeté", "Double Tour")
))
cor <- ggplot(df_plot)+
facet_wrap(~jump, nrow = 1)+
geom_segment(x = 0, y = 0, xend = 60, yend = 60, linetype = "solid", size = 0.2, colour = "grey")+
#geom_segment(x = 2.5, y = 0, xend = 52.5, yend = 50, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 5, y = 0, xend = 55, yend = 50, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 0, y = 2.5, xend = 50, yend = 52.5, linetype = "solid", size = 0.05, colour = "grey")+
#geom_segment(x = 0, y = 5, xend = 50, yend = 55, linetype = "solid", size = 0.05, colour = "grey")+
ggtext::geom_richtext(
data = stats,
aes(
label = paste0(glue::glue("r<sub>rm</sub> = "), format(round(rrm, digits = 2), nsmall = 2), glue::glue("; <i>p</i> < "), p2)
),
x = 33, y = 4, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
ggtext::geom_richtext(
data=stats,
aes(
label = paste0(glue::glue("r = "), format(round(r1, digits = 2), nsmall = 2), glue::glue("; <i>p</i> < "), p1)
),
x = 33, y = 9, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
ggtext::geom_richtext(
data=stats,
aes(
label = paste0(glue::glue("MAE = "), format(round(mae, digits = 2), nsmall = 2), glue::glue(" cm"))
),
x = 33, y = 14, fill = "transparent", label.colour = "transparent", family = "Arial", hjust = 0, size = 3
)+
geom_point(
aes(
x = fp_height,
y = imu_height
),
shape = 21, fill = "transparent", colour = "black"
)+
geom_smooth(method = "lm",
aes(
x = fp_height,
y = imu_height
),
se = F, colour = "black", size = 0.5
)+
theme_classic()+
coord_cartesian(xlim = c(0, 60), ylim = c(0, 60), expand = F, clip = "off")+
theme(
axis.line = element_line(size = 0.2),
axis.ticks = element_line(size = 0.2),
panel.grid.major = element_line(size = 0.25),
plot.margin = margin(5,5,5,5, unit = "pt"),
strip.background = element_blank(),
panel.spacing.x = unit(5, "mm")
)+
labs(
x = "Force Platform Measurement (cm)",
y = "IMU Measurement (cm)"
)#+
#ggsave("plot4.png", height = 90, width = 300, units = "mm", type = "cairo")
ba <- ggplot(limits)+
facet_wrap(~jump, nrow = 1)+
geom_rect(aes(ymin = lower.ci1, ymax = upper.ci1), xmin = 1, xmax = 49, alpha = 0.1)+
geom_rect(xmin = 1, xmax = 49, aes(ymin = lower.ci2, ymax = upper.ci2), alpha = 0.1)+
geom_rect(xmin = 1, xmax = 49, aes(ymin = lower.ci3, ymax = upper.ci3), alpha = 0.1)+
geom_segment(x = 0, xend = 50, y = 0, yend = 0, size = 0.3)+
geom_segment(aes(y = estimate1, yend = estimate1,), x = 1, xend = 49, size = 0.3, linetype = "dashed")+
geom_segment(x = 1, xend = 49, aes(y = estimate2, yend = estimate2), size = 0.3, linetype = "dotted", colour = "black")+
geom_segment(x = 1, xend = 49, aes(y = estimate3, yend = estimate3), size = 0.3, linetype = "dotted", colour = "black")+
theme_classic()+
coord_cartesian(xlim = c(0, 50), ylim = c(-20, 20), expand = F, clip = "on")+
geom_point(
data = df_plot,
aes(
x = (fp_height + imu_height) / 2,
y = fp_height - imu_height
),
shape = 21, fill = "transparent", colour = "black"
)+
theme(
axis.line = element_line(size = 0.3),
axis.ticks = element_line(size = 0.3),
panel.grid.major = element_line(size = 0.25),
plot.margin = margin(5,5,5, 30, unit = "pt"),
strip.background = element_blank(),
strip.text = element_blank(),
panel.spacing.x = unit(5, "mm")
)+
labs(
x = "Mean Height Measurement (cm)",
y = "Force Platform - IMU (cm)"
)#+
#ggsave("plot_ba.png", height = 90, width = 300, units = "mm", type = "cairo")
cor/ba +
ggsave("C:/Users/shaw_/Google Drive/PhD/Algorithm Validation/Height/plot_all.png", height = 160, width = 300, units = "mm", type = "cairo")
cor/ba +
ggsave("C:/Users/shaw_/Google Drive/PhD/Algorithm Validation/Height/plot_all.png", height = 160, width = 300, units = "mm", type = "cairo")
OpenTrack::run_app()
library(OpenTrack)
OpenTrack::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
df <- fread("C:/Users/shaw_/Documents/R/OpenTrack/example_upload.csv")
mean(  df[runmax(abs(df[,2]), 6000) > 1.05, 2]  , na.rm = T)
df[runmax(abs(df[,2]), 6000) > 1.05, 2]
runmax(abs(df[,2]), 6000) > 1.05
abs(df[,2]), 6000)
abs(df[,2]
abs(df[,2])
df[,2]
abs(df$xacc)
abs(df[,2])
abs(df[,2]
)
runmax(abs(df[,2]), 6000)
runmax(unlist(abs(df[,2]), 6000))
runmax(unlist(abs(df[,2])), 6000)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
mean(  df[runmax(unlist(abs(df[,2])), 6000) > 1.05, 2]  , na.rm = T)
runmax(unlist(abs(df[,2])), 6000) > 1.05, 2]
df[runmax(unlist(abs(df[,2])), 6000) > 1.05, 2]
mean(  unlist(df[runmax(unlist(abs(df[,2])), 6000) > 1.05, 2])  , na.rm = T)
mean(  unlist(df[runmax(unlist(abs(df[,3])), 6000) > 1.05, 3])  , na.rm = T)
mean(  unlist(df[runmax(unlist(abs(df[,4])), 6000) > 1.05, 4])  , na.rm = T)
c1.mn <- mean(  unlist(df[runmax(unlist(abs(df[,2])), 6000) > 1.05, 2])  , na.rm = T)
c2.mn <- mean(  unlist(df[runmax(unlist(abs(df[,3])), 6000) > 1.05, 3])  , na.rm = T)
c3.mn <- mean(  unlist(df[runmax(unlist(abs(df[,4])), 6000) > 1.05, 4])  , na.rm = T)
1 - abs(c1.mn)
1 - abs(c2.mn)
1 - abs(c3.mn)
c1.diff <- 1 - abs(c1.mn)
c2.diff <- 1 - abs(c2.mn)
c3.diff <- 1 - abs(c3.mn)
which(c(c1.diff, c2.diff, c3.diff) == min(c(c1.diff, c2.diff, c3.diff)))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(OpenTrack)
OpenTrack::run_app()
OpenTrack::run_app()
OpenTrack::run_app()
OpenTrack::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(OpenTrack)
OpenTrack::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
