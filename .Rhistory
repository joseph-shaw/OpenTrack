dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),
"nodejs"), force_install = FALSE, nodejs_version = "v10.16.0",
permission_to_install = FALSE)
Arguments
install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),
"nodejs"), force_install = FALSE, nodejs_version = "v10.16.0",
permission_to_install = FALSE)
electricShine::install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),
"nodejs"), force_install = FALSE, nodejs_version = "v10.16.0",
permission_to_install = FALSE)
file.path(system.file(package = "electricShine"),"nodejs")
electricShine::install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),"nodejs"),
force_install = FALSE,
nodejs_version = "v10.16.0",
permission_to_install = FALSE)
electricShine::install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),"nodejs"),
force_install = TRUE,
nodejs_version = "v10.16.0",
permission_to_install = FALSE)
electricShine::install_nodejs(node_url = "https://nodejs.org/dist",
nodejs_path = file.path(system.file(package = "electricShine"),"nodejs"),
force_install = TRUE,
nodejs_version = "v10.16.0",
permission_to_install = FALSE)
electricShine::electrify(app_name = "My_App",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
electricShine::electrify(app_name = "My_App2",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
buildPath <- tempdir()
electricShine::electrify(app_name = "My_App3",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
dir.create(new_path)
platform <- "win"
arch <- "x64"
electricShine::electrify(app_name = "My_App3",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
y
electricShine::electrify(app_name = "My_App4",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = buildPath,
function_name = "run_app",
git_host = "github",
git_repo = "chasemc/demoApp@8426481",
package_install_opts = list(type = "binary",
dependencies = c("Depends",
"Imports")
),
cran_like_url = "https://cran.r-project.org"
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "shinydashboardPlus" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shinydashboardPlus)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack.R')
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
detach("package:shinydashboardPlus", unload = TRUE)
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
runApp('~/R/Accelerometer App/Open_Source_App/OpenTrack v-0-0-1.R')
detach("package:shinydashboardPlus", unload = TRUE)
remove.packages("shinydashboardPlus", lib="~/R/win-library/4.0")
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
devtools::install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.9.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shinydashboardPlus)
usethis::use_package( "tidyverse" )
usethis::use_package( "dplyr" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("packrat")
packrat::init("~/OpenTrack")
packrat::init("~/R/OpenTrack")
packrat::status()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
rhub::check_for_cran()
run_app
OpenTrack::run_app()
usethis::use_package( "Cairo" )
usethis::use_package( "DBI" )
usethis::use_package( "Cairo" )
usethis::use_package( "DescTools" )
usethis::use_package(DT)
usethis::use_package(caTools)
usethis::use_package(chron)
usethis::use_package("DT")
usethis::use_package("caTools")
usethis::use_package("chron")
usethis::use_package("chron")
usethis::use_package("dashboardthemes")
usethis::use_package("data.table")
usethis::use_package("dplyr")
usethis::use_package("dygraphs")
usethis::use_package("extrafont")
usethis::use_package("fmsb")
usethis::use_package("fmsb")
1
usethis::use_package("ggiraph")
usethis::use_package("ggplot2")
usethis::use_package("gridExtra")
usethis::use_package("lubridate")
usethis::use_package("odbc")
usethis::use_package("plotly")
usethis::use_package("png")
usethis::use_package("pool")
usethis::use_package("rowr")
usethis::use_package("shiny")
usethis::use_package("shinyDirectoryInput")
usethis::use_package("shinyDirectoryInput")
usethis::use_package("shinyFiles")
usethis::use_package("shinyWidgets")
usethis::use_package("shinycssloaders")
usethis::use_package("shinydashboard")
usethis::use_package("shinydashboardPlus")
usethis::use_package("shinyjs")
usethis::use_package("shinyjs")
usethis::use_package("tidyr")
usethis::use_package("xts")
usethis::use_package("tidyverse")
usethis::use_package("zoo")
usethis::use_package("config")
usethis::use_package("golem")
usethis::use_package("htmltools")
library(OpenTrack)
OpenTrack::run_app()
remove.packages("shinydashboardPlus", lib="~/R/OpenTrack/packrat/lib/x86_64-w64-mingw32/4.0.4")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
OpenTrack::run_app()
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
packrat::status()
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
remove.packages("shinydashboardPlus")
packrat::clean()
packrat::status()
install.packages("shinydashboardPlus")
packrat::restore()
packrat::restore()
packrat::clean()
install.packages("rowr")
install.packages("shinyDirectoryInput")
packrat::clean()
require(devtools)
install_version("rowr", version = "1.1.3", repos = "http://cran.us.r-project.org")
devtools::install_github('wleepang/shiny-directory-input')
packrat::clean()
devtools::install_github('wleepang/shiny-directory-input')
packrat::clean()
install.packages(shinyDirectoryInput)
install.packages("shinyDirectoryInput")
require(devtools)
install_version("shinyDirectoryInput", version = "0.2.0", repos = "http://cran.us.r-project.org")
install.packages("C:/",
repos = NULL,
type = "source")
install.packages("C:/shiny-directory-input-master",
repos = NULL,
type = "source")
packrat::restore()
packrat::clean(packages = "shinydashboardPlus")
packrat::unused_packages()
require(devtools)
install_version("shinydasboardPlus", version = "0.5.7", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("shinydasboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
remove.packages("shinydashboardPlus")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
devtools::install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
install.packages("fs")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
install.packages("digest")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org", dependencies = T)
install.packages("glue")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org", dependencies = T)
remove.packages("packrat")
require(devtools)
install_version("shinydashboardPlus", version = "0.7.5", repos = "http://cran.us.r-project.org", dependencies = T)
2+2
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("packrat")
library(OpenTrack)
OpenTrack::run_app()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
is.numeric(5)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install_github("joseph-shaw/OpenTrack")
devtools::install_github("joseph-shaw/OpenTrack")
devtools::install_github("joseph-shaw/OpenTrack")
OpenTrack::run_app
OpenTrack::run_app()
library(OpenTrack)
OpenTrack::run_app
OpenTrack::run_app()
install.packages("OpenTrack")
install.packages("OpenTrack")
detach("package:OpenTrack", unload = TRUE)
install.packages("OpenTrack")
data <- data.frame(
x = 1:10,
y = 101:110,
label = rep("A", 10)
)
library("ggplot2")
ggplot(data)+
annotate(x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate(x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate(x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate("text", x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate(data=data[1,] "text", x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate(data=data[1,], "text", x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
annotate(data=data[1,], "text", x = 5, y = 10, aes(label = label))
ggplot(data)+
geom_point(aes(x = x, y = y))+
geom_label(aes(x = x, y = y, label = label))
