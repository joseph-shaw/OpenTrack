#Filter frequency?
#Correct bodyweights

# File sync
library(tidyverse)
library(rqdatatable)

bw <- 70.5

# Filter settings ---------------------------------------------------------
run.filter <- TRUE
data.freq <- 100
order <- 4
filt.freq <- 22
nyquist.freq <- data.freq / 2
bf <- signal::butter(order, filt.freq / nyquist.freq, type="low")

#IMUs ---------------------------------------------------------------------

files <- c("FOOT", "FOOT2", "FOOT3", "SHANK", "THIGH", "WAIST", "SCAP")

for(i in files){
  file.name <- paste0("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/Raw Data/Accelerometer Files/FS/FS_01_", i, ".csv")
  df <- read.csv(file.name) %>%
    rename(time = ms) %>% 
    mutate(time = time/1000)
  if(i == "FOOT"){df <- df %>% filter(yacc != 0)}
  
  max <- DescTools::RoundTo(max(df$time, na.rm = TRUE), multiple = 1, FUN = floor) 
  time <- seq(from = 6, to = max, by = 0.01)
  
  x.acc <-   as.numeric(unlist(approx(x = df$time, y = df$xacc,  xout = time, method = 'linear')[2], use.names=FALSE))
  y.acc <-   as.numeric(unlist(approx(x = df$time, y = df$yacc,  xout = time, method = 'linear')[2], use.names=FALSE))
  z.acc <-   as.numeric(unlist(approx(x = df$time, y = df$zacc,  xout = time, method = 'linear')[2], use.names=FALSE))
  x.a_vel <- as.numeric(unlist(approx(x = df$time, y = df$xgyro, xout = time, method = 'linear')[2], use.names=FALSE))
  y.a_vel <- as.numeric(unlist(approx(x = df$time, y = df$ygyro, xout = time, method = 'linear')[2], use.names=FALSE))
  z.a_vel <- as.numeric(unlist(approx(x = df$time, y = df$zgyro, xout = time, method = 'linear')[2], use.names=FALSE))
  #x.deg <-   as.numeric(unlist(approx(x = df$time, y = df$xdeg,  xout = time, method = 'linear')[2], use.names=FALSE))
  #y.deg <-   as.numeric(unlist(approx(x = df$time, y = df$ydeg,  xout = time, method = 'linear')[2], use.names=FALSE))
  #z.deg <-   as.numeric(unlist(approx(x = df$time, y = df$zdeg,  xout = time, method = 'linear')[2], use.names=FALSE))
  x.com <-   as.numeric(unlist(approx(x = df$time, y = df$xcom,  xout = time, method = 'linear')[2], use.names=FALSE))
  y.com <-   as.numeric(unlist(approx(x = df$time, y = df$ycom,  xout = time, method = 'linear')[2], use.names=FALSE))
  z.com <-   as.numeric(unlist(approx(x = df$time, y = df$zcom,  xout = time, method = 'linear')[2], use.names=FALSE))
  
  df <- data.frame(time, x.acc, y.acc, z.acc, x.a_vel, y.a_vel, z.a_vel, x.com, y.com, z.com) %>% #, x.deg, y.deg, z.deg) %>% 
    mutate(time = time - 4.99)
  
 # # Run Filter and adjust
 # lead2 <- function(x){
 #   lead(x, 2)
 # }
  
  df <- df %>% 
    #mutate_at(2:7, signal::filter, filt = bf) %>%
    mutate(
      x.a_vel = x.a_vel * 180/pi, # convert from radians to degrees
      y.a_vel = y.a_vel * 180/pi,
      z.a_vel = z.a_vel * 180/pi
    ) %>% 
    #replace_na(list(0)) %>% 
    mutate_at(2:7, signal::filtfilt, filt = bf) %>%
    mutate_at(2:7, as.vector) %>% 
    #mutate_at(2:7, lead2) %>% 
    mutate(
      r.acc = sqrt(x.acc^2 + y.acc^2 + z.acc^2),
      r.a_vel = sqrt(x.a_vel^2 + y.a_vel^2 + z.a_vel^2)
    )
  
  # Acceleration calculator
  calc.a_acc <- function(x){
    (lead(x, 1) - x)/0.01
  }
  
  # calculate angular acceleration
  df <- df %>% 
    mutate(across(contains("a_vel"), .funs = calc.a_acc, .names = "{col}_a_acc")) %>% 
    rename_all(list(~stringr::str_replace_all(., 'a_vel_', ''))) %>% 
    dplyr::select(-contains("r.a_vel"))  
  
  assign(i, df)
  
}


# Process FP accelerometer

FP <- read.csv("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/Raw Data/Accelerometer Files/FS/FS_01_FP.csv") %>% 
  rename(time = ms) %>% 
  mutate(time = time/1000)
max <- DescTools::RoundTo(max(FP$time, na.rm = TRUE), multiple = 1, FUN = floor) 
time <- seq(from = 4, to = max, by = 0.01)
x.acc <-   as.numeric(unlist(approx(x = FP$time, y = FP$xacc,  xout = time, method = 'linear')[2], use.names=FALSE))
y.acc <-   as.numeric(unlist(approx(x = FP$time, y = FP$yacc,  xout = time, method = 'linear')[2], use.names=FALSE))
z.acc <-   as.numeric(unlist(approx(x = FP$time, y = FP$zacc,  xout = time, method = 'linear')[2], use.names=FALSE))
FP <- data.frame(
  time = time - 3.99,
  force = sqrt(x.acc^2 + y.acc^2 + z.acc^2)
)
FP2 <- read.csv("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/Raw Data/Accelerometer Files/FS/FS_01_FP2.csv") %>% 
  rename(time = ms) %>% 
  mutate(time = time/1000)
max <- DescTools::RoundTo(max(FP2$time, na.rm = TRUE), multiple = 1, FUN = floor) 
time <- seq(from = 4, to = max, by = 0.01)
x.acc <-   as.numeric(unlist(approx(x = FP2$time, y = FP2$xacc,  xout = time, method = 'linear')[2], use.names=FALSE))
y.acc <-   as.numeric(unlist(approx(x = FP2$time, y = FP2$yacc,  xout = time, method = 'linear')[2], use.names=FALSE))
z.acc <-   as.numeric(unlist(approx(x = FP2$time, y = FP2$zacc,  xout = time, method = 'linear')[2], use.names=FALSE))
FP2 <- data.frame(
  time = time - 3.99,
  force = sqrt(x.acc^2 + y.acc^2 + z.acc^2)
)


# Sync traces -------------------------------------------------------------

fp <-    498
fp2 <-   206
foot <-  529
foot2 <- 0
foot3 <- 0
shank <- 306
thigh <- 0
waist <- 668
scap <-  203

#FOOT$time <- FOOT$time + 5.29
FOOT2$time <- FOOT2$time + 1569.35
FOOT3$time <- FOOT3$time + 2178.53

plotly::plot_ly(type = "scatter", mode = "lines") %>% 
  plotly::add_trace(data = FOOT,  x = ~time, y = ~lead( r.acc, foot), name = "foot", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace(data = FOOT2,  x = ~time, y = ~lag(r.acc, foot2), name = "foot2", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace(data = FOOT3,  x = ~time, y = ~lag(r.acc, foot3), name = "foot3", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace(data = SHANK, x = ~time, y = ~lead(r.acc, shank), name = "shank", line = list(color = 'red'), opacity = 0.3) %>% 
  plotly::add_trace(data = THIGH, x = ~time, y = ~lead(r.acc, thigh), name = "thigh", line = list(color = 'green'), opacity = 0.3) %>% 
  plotly::add_trace(data = WAIST, x = ~time, y = ~lead(r.acc, waist), name = "waist", line = list(color = 'orange'), opacity = 0.3) %>% 
  plotly::add_trace(data = SCAP,  x = ~time, y = ~lead(r.acc, scap), name = "scap", line = list(color = 'black'), opacity = 0.3) %>% 
  plotly::add_trace(data = FP,    x = ~time, y = ~lead(force, fp), name = "fp", line = list(color = 'grey'), opacity = 0.3) %>% 
  plotly::add_trace(data = FP2,    x = ~time, y = ~lead(force, fp2), name = "fp2", line = list(color = 'black'), opacity = 0.3)


plotly::plot_ly(type = "scatter", mode = "lines") %>% 
  plotly::add_trace(data = FOOT,  x = ~time, y = ~lag( z.acc, foot), name = "foot", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace(data = SHANK, x = ~time, y = ~lead(z.acc, shank), name = "shank", line = list(color = 'red'), opacity = 0.3) %>% 
  plotly::add_trace(data = THIGH, x = ~time, y = ~lead(z.acc, thigh), name = "thigh", line = list(color = 'green'), opacity = 0.3) %>% 
  plotly::add_trace(data = WAIST, x = ~time, y = ~lead(z.acc, waist), name = "waist", line = list(color = 'orange'), opacity = 0.3) %>% 
  plotly::add_trace(data = SCAP,  x = ~time, y = ~lead(z.acc, scap), name = "scap", line = list(color = 'black'), opacity = 0.3) #%>% 
  #plotly::add_trace(data = FP,    x = ~time, y = ~lead(force, fp), name = "fp", line = list(color = 'grey'), opacity = 0.3)

names(FOOT)[c(2:15)] <- paste0("FOOT_", names(FOOT)[c(2:15)])
names(FOOT2)[c(2:15)] <- paste0("FOOT2_", names(FOOT2)[c(2:15)])
names(FOOT3)[c(2:15)] <- paste0("FOOT3_", names(FOOT3)[c(2:15)])
names(SHANK)[c(2:15)] <- paste0("SHANK_", names(SHANK)[c(2:15)])
names(THIGH)[c(2:15)] <- paste0("THIGH_", names(THIGH)[c(2:15)])
names(WAIST)[c(2:15)] <- paste0("WAIST_", names(WAIST)[c(2:15)])
names(SCAP)[c(2:15)] <- paste0("SCAP_", names(SCAP)[c(2:15)])

SHANK$time <- round(SHANK$time - shank/100, 2)
THIGH$time <- round(THIGH$time - thigh/100, 2) # + to -
WAIST$time <- round(WAIST$time - waist/100, 2)
SCAP$time <-  round(SCAP$time - scap/100  , 2)
FP$time <- round(FP$time - fp/100, 2)
FP2$time <- round(FP2$time - fp2/100, 2)
FOOT$time <-  round(FOOT$time + foot / 100, 2)
FOOT2$time <-  round(FOOT2$time + foot2 / 100, 2)
FOOT3$time <-  round(FOOT3$time + foot3 / 100, 2)

data <- WAIST %>% 
  left_join(FOOT, by = "time") %>% 
  left_join(FOOT2, by = "time") %>% 
  left_join(FOOT3, by = "time") %>% 
  left_join(SHANK, by = "time") %>% 
  left_join(THIGH, by = "time") %>% 
  left_join(SCAP, by = "time") %>% 
  left_join(FP, by = "time") %>% 
  left_join(FP2, by = "time") %>% 
  distinct(time, .keep_all = T) %>% 
  rename(
    force = force.y,
    sync = force.x
  )

plotly::plot_ly(data = data, type = "scatter", mode = "lines") %>% 
  plotly::add_trace(x = ~time, y =  ~FOOT_r.acc, name = "foot", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~FOOT2_r.acc, name = "foot2", line = list(color = 'yellow'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~FOOT3_r.acc, name = "foot3", line = list(color = 'grey'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~SHANK_r.acc, name = "shank", line = list(color = 'red'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~THIGH_r.acc, name = "thigh", line = list(color = 'green'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~WAIST_r.acc, name = "waist", line = list(color = 'orange'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~SCAP_r.acc, name = "scap", line = list(color = 'black'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~force, name = "force", line = list(color = 'black'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~sync, name = "sync", line = list(color = 'black'), opacity = 0.3)

data[163294:196000, 13:23] <- data[163294:196000, 24:34]
data[200000:244000, 13:23] <- data[200000:244000, 35:45]

plotly::plot_ly(data = data, type = "scatter", mode = "lines") %>% 
  plotly::add_trace(x = ~time, y =  ~FOOT_r.acc, name = "foot", line = list(color = 'blue'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~SHANK_r.acc, name = "shank", line = list(color = 'red'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~THIGH_r.acc, name = "thigh", line = list(color = 'green'), opacity = 0.3) %>% 
  plotly::add_trace( x = ~time, y = ~WAIST_r.acc, name = "waist", line = list(color = 'orange'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~SCAP_r.acc, name = "scap", line = list(color = 'black'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~force, name = "force", line = list(color = 'black'), opacity = 0.3) %>% 
  plotly::add_trace(x = ~time, y =  ~sync, name = "sync", line = list(color = 'black'), opacity = 0.3)

data <- data %>% 
  dplyr::select(-starts_with("FOOT2")) %>% 
  dplyr::select(-starts_with("FOOT3"))

write.csv(data, "C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/Synced Data/FS_01.csv") 


# FreeBody Data ---------------------------------------------------
# out of order
delays <- c(855.7, 1072.83, 1118.55, 1267.66, 1322.91)
sets <- c("01-01", "02-01", "02-02", "03-01", "03-02") #, "01-02", "01-03", "02-03", "03-01", "03-02-01", "03-03", "04-01" )

cols <- read.csv("C:/Users/shaw_/Documents/R/FreeBody/headers.csv")[1,] %>% 
  mutate_all(tolower) %>% 
  mutate_all(str_remove_all, pattern = fixed(" ")) %>% 
  mutate_all(str_remove_all, pattern = fixed("(")) %>% 
  mutate_all(str_remove_all, pattern = fixed(")")) %>% 
  mutate_all(str_remove_all, pattern = fixed("*"))


# for syncing --------------------------
fb <- read.csv("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/FreeBody Output/FS/03-02-01/Outputs/optimization/force_mod.csv",
               col.names = cols[1,], header = F) %>% 
  rowwise() %>% 
  mutate(
    quadriceps =  sum(
      vastusinterm.1, vastusinterm.2, vastusinterm.3, vastusinterm.4, vastusinterm.5, 
      vastusinterm.6, vastuslat.inf.1, vastuslat.inf.2, vastuslat.inf.3, 
      vastuslat.inf.4, vastuslat.inf.5, vastuslat.inf.6, vastuslat.sup.1, 
      vastuslat.sup.2, vastusmed.inf.1, vastusmed.inf.2, vastusmed.mid.1, 
      vastusmed.mid.2, vastusmed.sup.1, vastusmed.sup.2, vastusmed.sup.3, 
      vastusmed.sup.4, vastusmed.sup.5, vastusmed.sup.6, rectusfem.1, rectusfem.2
    ),
    achilles = sum(
      gastrocn.lat., gastrocn.med., soleusmed.1, soleusmed.2, soleusmed.3, soleuslat.1,
      soleuslat.2, soleuslat.3
    ) 
  ) %>% 
  mutate(
    time = ceiling(time*100 / 2) / 100
  ) %>% 
  filter(
    flag1 == 104 | flag1 == 0,
    is.na(flag2),
    is.na(flag2)
  ) %>% 
  distinct(
    time, .keep_all = T
  )

fb$time = fb$time + 1322.91

plotly::plot_ly(data = data, type = "scatter", mode = "lines") %>% 
  plotly::add_trace(x = ~time, y =  ~force, name = "acc", line = list(color = 'red'), opacity = 0.5) %>% 
  plotly::add_trace(x = ~time, y =  ~WAIST_z.acc, name = "waist", line = list(color = 'green'), opacity = 0.3) %>% 
  plotly::add_trace(data = fb, x = ~time, y = ~fz, name = "fp", line = list(color = 'blue'), opacity = 0.5, yaxis = "y2") %>% 
    plotly::layout(
      yaxis2 = list(
        overlaying = "y",
        side = "right"
      )
    )
  
# Read and join freebody data ---------------------------

#natural join
for(i in 1:length(sets)){
  
  #read freebody data
  filepath <- paste0("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/FreeBody Output/FS/", sets[i], "/Outputs/optimization/force_mod.csv")
  correct_bw <- function(x){x/50*bw}
  
  fb <- read.csv(filepath, col.names = cols[1,], header = F) %>% 
    mutate_at(2:193, correct_bw) %>% 
    rowwise() %>% 
    mutate(
      quadriceps =  sum(
        vastusinterm.1, vastusinterm.2, vastusinterm.3, vastusinterm.4, vastusinterm.5, 
        vastusinterm.6, vastuslat.inf.1, vastuslat.inf.2, vastuslat.inf.3, 
        vastuslat.inf.4, vastuslat.inf.5, vastuslat.inf.6, vastuslat.sup.1, 
        vastuslat.sup.2, vastusmed.inf.1, vastusmed.inf.2, vastusmed.mid.1, 
        vastusmed.mid.2, vastusmed.sup.1, vastusmed.sup.2, vastusmed.sup.3, 
        vastusmed.sup.4, vastusmed.sup.5, vastusmed.sup.6, rectusfem.1, rectusfem.2
      ),
      achilles = sum(
        gastrocn.lat., gastrocn.med., soleusmed.1, soleusmed.2, soleusmed.3, soleuslat.1,
        soleuslat.2, soleuslat.3
      ) 
    ) %>% 
    mutate(
      time = ceiling(time*100 / 2) / 100,
      time = time + delays[i],
      set = sets[i]
    ) %>% 
    filter(
      flag1 == 104 | flag1 == 0,
      is.na(flag2),
    ) %>% 
    distinct(
      time, .keep_all = T
    ) %>% 
    ungroup() %>% 
    mutate(
      time = as.numeric(as.character(time))
    )

  data <- natural_join(data, fb, 
                                by = "time",
                                jointype = "FULL")
  
  
}

# Plot joined data

plotly::plot_ly(data = data, type = "scatter", mode = "lines") %>% 
  plotly::add_trace(x = ~time, y =  ~achilles, name = "achilles", line = list(color = 'red'), opacity = 0.5) %>% 
  plotly::add_trace(x = ~time, y =  ~SCAP_z.acc, name = "waist", line = list(color = 'blue'), opacity = 0.5, yaxis = "y") %>% 
  plotly::add_trace(x = ~time, y =  ~fz, name = "force", line = list(color = 'green'), opacity = 0.5, yaxis = "y2") %>% 
  plotly::layout(
    yaxis2 = list(
      overlaying = "y",
      side = "right"
    )
  )

gc.label <- c(
  0, 863.3, 864.1, 864.9, 865.7, 866.6, 867.5, 868.4, 869.3, 870.1, 871.01, #01-01
  872.3, #01-02
  #, # 01-03
  1078.9, 1079.4, 1079.8, 1080.4, 1080.8, 1081.3, 1081.8, 1082.3, 1082.7, 1083.2, #02-01
  1084, 1128.2, 1128.7, 1129.2, 1129.7, 1130.1, 1130.6, 1131, 1131.5, 1132, 1132.5, 1132.9, #02-02
  1134, #02-03
  1274.25, 1275.5, 1276.7, 1278.1, 1279.5, 1281, 1282.4, 1283.9, 1285.3, 1286.7, 1288.1, 1289.5, 1292.1, 1293.5, 1294.9, 1296.3, 1297.7, 1299, #03-01
  1300.3, 1329.6, 1331, 1332.4, 1333.8, 1335.3, 1336.6, 1338, 1339.5, 1340.9, 1342.2, 1343.7, 1345.2, 1346.6, 1348, 1349.4, 1351, 1352.3, 1353.8, 1355.3, #03-02
  1357
  )

movements <- c(1:11, #01
               1:10, 1:12, #02
               1:18, 1:20 #03
              )
data$movement <- NA

for(i in 1:length(gc.label)){
  data <- data %>% 
    mutate(
      movement = ifelse(time > gc.label[i] & time < gc.label[i+1], movements[i], movement),
      movement = stringr::str_pad(movement, 2, pad = "0"),
      set_move = paste0(set, "-", movement)
      )
  
}

# read anthros
df_anthro <- read.csv("C:/Users/shaw_/Google Drive/PhD/Tissue-Load Study/Data/anthros/p01.csv") %>% 
  mutate(participant = "02") #!

data <- data %>% 
  # add participant id
  mutate(
    participant = "02" #!
  ) %>% 
  # add anthros
  left_join(df_anthro, by = "participant") %>% 
  # select columns
  dplyr::select(
    c(
      participant, set, movement, set_move, time,
      starts_with("foot", ignore.case = T), starts_with("shank", ignore.case = T), 
      starts_with("thigh", ignore.case = T), starts_with("waist", ignore.case = T),
      starts_with("scap", ignore.case = T), starts_with("trunk", ignore.case = T),
      achilles, anklex, ankley, anklez, patellartendon,
      fx, fy, fz
    )
  ) %>% 
  # filter unwanted data
  filter(
    fz > 0.2,
    !is.na(achilles),
  )



